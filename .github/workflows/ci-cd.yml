# ci-cd.yml

name: Django CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_SECURE_SSL_REDIRECT: ${{ secrets.DJANGO_SECURE_SSL_REDIRECT }}
      SECURE_PROXY_SSL_HEADER: ${{ secrets.SECURE_PROXY_SSL_HEADER }}
      DJANGO_SECURE_HSTS_SECONDS: ${{ secrets.DJANGO_SECURE_HSTS_SECONDS }}
      DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS: ${{ secrets.DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS }}
      DJANGO_SECURE_HSTS_PRELOAD: ${{ secrets.DJANGO_SECURE_HSTS_PRELOAD }}
      DJANGO_SESSION_COOKIE_SECURE: ${{ secrets.DJANGO_SESSION_COOKIE_SECURE }}
      DJANGO_CSRF_COOKIE_SECURE: ${{ secrets.DJANGO_CSRF_COOKIE_SECURE }}
      DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      POSTGRES_HOST: localhost
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      BACKEND_DOMAIN: ${{ secrets.BACKEND_DOMAIN }}
      PAYMENT_SUCCESS_URL: ${{ secrets.PAYMENT_SUCCESS_URL }}
      PAYMENT_CANCEL_URL: ${{ secrets.PAYMENT_CANCEL_URL }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      S3_BUCKET_ENABLED: ${{ secrets.S3_BUCKET_ENABLED }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run tests
        run: |
          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"tag:Name","Values":["web-app-ec2"]}]' \
            --comment "Pull new code and restart Docker containers" \
            --parameters 'commands=["cd /ai_greeting_cards && git fetch origin && git checkout main && git pull origin main && docker-compose -f docker-compose.prod.yml up -d --build"]' \
            --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}